
1)  
指针占用内存，而引用只是别名，本身不占内存2)  
引用使用时无需解引用，而指针需要3)  
引用必须被初始化，指针不用4)  
引用不能为空，而指针可以5)  
引用一旦初始化就不可以改变，而指针可以改变指向6)  
sizeof引用得到的是所指向对象的大小，而sizeof指针是得到指针本身。（这里有数组指针的问题）7)  
指针和引用的自增自减运算意义不一样。

1：指针越少出现越好，并不是说不要指针了；
2：能用引用就用引用，是因为引用比指针更安全，注意这里的“更”字，不表示引用就绝对安全；
3：能将指针包装起来就包装起来，如智能指针，目的就是防止内存泄露，另外使代码看起来也更优美，我们总不会C++代码写多了，看不到指针就难受吧？
4：说到内存泄露，大家就都知道指针是罪魁祸首，那如果我们在代码级别都看不到多少指针，那它惹祸的概率是不是降低了？即便出事了，我们fix起来是不是更快更方便了？
5：像C,C++这种语言是没有绝对安全可言的，你想怎么破坏就可以怎么破坏，所以我们要做的仅仅是提高安全级别，总不能因为没有绝对安全的保证，我们就随便耍流氓、发脾气吧？

heap并不属于STL容器组件，它分为 max heap 和min heap，在缺省情况下，max-heap是优先队列（priority queue）的底层实现机制。
而这个实现机制中的max-heap实际上是以一个vector表现的完全二叉树（complete binary tree）。
STL在<algorithm.h>中实现了对存储在vector/deque 中的元素进行堆操作的函数，包括make_heap, pop_heap, push_heap, sort_heap，
对不愿自己写数据结构堆的C++选手来说，这几个算法函数很有用，详细解释可以参见： http://www.cplusplus.com/reference/algorithm/make_heap/